paths:
  /api/carts:
    get:
      summary: Obtiene todos los carritos
      tags:
        - Carritos
      responses:
        "200":
          description: Los carritos fueron obtenidos OK desde la Base de Datos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        "500":
          description: Error interno del servidor
  /api/carts/{cid}:
    get:
      summary: Obtiene un carrito por ID
      tags:
        - Carritos
      parameters:
        - name: cid
          in: path
          required: true
          description: ID del carrito que se está solicitando
          schema:
            type: string
      responses:
        "200":
          description: Recupera un carrito de la DB según el ID proporcionado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        "404":
          description: El carito con ID X no existe. 
        "500":
          description: Error interno del servidor
  /api/carts/purchase:
    post:
      summary: Crea un nuevo carrito
      tags:
        - Carritos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartRequest'
      responses:
        "201":
          description: Carrito creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        "400":
          description: No hay suficiente stock para algunos productos en el carrito.
        "401":
          description: El ID proporcionado no es válido.
        "404":
          description: Producto con id X no encontrado.
        "500":
          description: Error interno del servidor
components:
  schemas:
    Cart:
      type: object
      properties:
        productos:
          type: array
          items:
            type: object
            properties:
              producto:
                type: string  # Puedes ajustar el tipo según el tipo de ObjectId en tu base de datos
                description: ID del producto en el carrito
              cantidad:
                type: integer
                description: Cantidad del producto en el carrito
        amount:
          type: number
          description: Precio total del carrito    
    CreateCartRequest:
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: ID del producto
              quantity:
                type: integer
                description: Cantidad del producto en el carrito
      required:
        - products
    CartResponse:
      type: object
      properties:
        _id:
          type: string
          description: ID del carrito creado
        productos:
          type: array
          items:
            type: object
            properties:
              producto:
                type: string
                description: ID del producto en el carrito
              cantidad:
                type: integer
                description: Cantidad del producto en el carrito
        amount:
          type: number
          description: Precio total del carrito